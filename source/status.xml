[define title]Status[end]

[define body]
<h2>Status</h2>

<h3>Current Release</h3>
<p>
  The latest release is version 0.0.1.  As of this release, everything
  should work as advertised on the supported platforms.  Please post
  to the <a href="http://groups.google.com/group/avian">group</a> if
  you have any problems.
</p>

<a href="avian-0.0.1.tar.bz2">
  <div class="code">
    Download Avian 0.0.1
  </div>
</a>

<p>
  Notable changes since the last release:
</p>
<ul>
  <li>Fixed the algorithm responsible for static stack analysis to
  determine where the object references are on the stack for garbage
  collection.  The old version gave false positives in rare cases,
  leading to crashes when garbage collecting.</li>
  <li>Fixed thinko in Math.random implementation on Windows</li>
  <li>Fixed off-by-one error in StringBuilder.insert</li>
  <li>Added a few more class library methods, including Double.isNaN,
  Double.isInfinite, and Collection.addAll</li>
</ul>

<h3>Next Release</h3>
<p>
  The next major release will be 1.0.  These are the criteria for that
  release:
</p>
<ul>
  <li>Improve the quality of the code generated by the JIT compiler by
  using machine registers more efficiently (in progress - see compiler
  branch in repository)</li>
  <li>Support Mac OS X on PowerPC</li>
  <li>Rework memory allocation in garbage collector to improve
  performance in low memory situations</li>
</ul>

<h3>Post-1.0 Ideas</h3>
<ul>
  <li>Experiment with optimizations and extensions to better support
  languages other than Java
    <ul>
      <li>Tail call optimization</li>
      <li>First-class functions</li>
      <li><a href="http://jcp.org/en/jsr/detail?id=292">invokedynamic</a></li>
    </ul>
  </li>
  <li>Support additional architectures such as ARM, Sparc, and MIPS</li>
</ul>

<h3>Non-goals</h3>
<p>
  Avian is not a complete Java implementation, nor is it intended to
  be.  Thus, less-used Java features will only be added if they are
  easily maintainable and do not add significant overhead to
  applications which don't use them.
</p>
<p>
  In particular, Avian does no bytecode verification in the VM and no
  security checks in the class library.  Applications which run
  untrusted bytecode must therefore do their own verification and
  sanitation.
</p>

[end]

[template "primary.xml"]
