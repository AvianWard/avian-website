[define title]Status[end]

[define body]
<h2>Status</h2>

<h3>Current Release</h3>
<p>
  The latest release is version 0.2.  As of this release, everything
  should work as advertised on the supported platforms.  Please post
  to the <a href="http://groups.google.com/group/avian">discussion
  group</a> if you have any problems.
</p>

<a href="avian-0.2.tar.bz2">
  <div class="code">
    Download Avian 0.2
  </div>
</a>

<p>
  Recent changes:
</p>
<ul>
  <li>Modified JIT compiler to support PowerPC, including changes
  which should make porting to other ISAs and ABIs much easier.</li>
  <li>Implemented proper UTF-8 encoding and decoding in
  java.lang.String</li>
  <li>Added support for volatile fields.  Avian now fully supports the
  Java Memory Model.</li>
  <li>Added ad-hoc interface for generating heap snapshots at runtime,
  useful for memory profiling</li>
  <li>Added support for ahead-of-time compilation and classfile
  parsing.  This feature helps improve the startup time of large
  applications and reduces GC overhead, at the cost of larger
  binaries.</li>
  <li>Numerous bugfixes and performance improvements</li>
</ul>

<h3>Future Releases</h3>
<p>
  The next major release will be 1.0.  These are the remaining
  criteria for that release:
</p>
<ul>
  <li>Rework memory allocation in garbage collector to improve
  performance in low memory situations
  (see <a href="http://groups.google.com/group/avian/browse_thread/thread/5b3f13bf198334b3">here</a>
  for details)</li>
  <li>Adapt Avian to support a more complete class library, such as
  GNU Classpath or IcedTea.  This will give us a much larger body of
  software to test against.</li>
</ul>

<h3>Post-1.0 Ideas</h3>
<ul>
  <li>Experiment with optimizations and extensions to better support
  languages other than Java
    <ul>
      <li>Tail call optimization</li>
      <li>Cooperative multitasking</li>
      <li>First-class functions</li>
      <li><a href="http://jcp.org/en/jsr/detail?id=292">invokedynamic</a></li>
    </ul>
  </li>
  <li>Support additional architectures such as ARM, Sparc, and MIPS</li>
</ul>

<h3>Non-goals</h3>
<p>
  Avian is not a complete Java implementation, nor is it intended to
  be.  Thus, less-used Java features will only be added if they are
  easily maintainable and do not add significant overhead to
  applications which don't use them.
</p>
<p>
  In particular, Avian does no bytecode verification in the VM and no
  security checks in the class library.  Applications which run
  untrusted bytecode must therefore do their own verification and
  sanitation.
</p>

[end]

[template "primary.xml"]
