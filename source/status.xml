[define title]Status[end]

[define body]
<h2>Status</h2>

<h3>Current Release</h3>
<p>
  The latest release is version 0.1.1.  As of this release, everything
  should work as advertised on the supported platforms.  Please post
  to the <a href="http://groups.google.com/group/avian">discussion
  group</a> if you have any problems.
</p>

<a href="avian-0.1.1.tar.bz2">
  <div class="code">
    Download Avian 0.1.1
  </div>
</a>

<p>
  Recent changes:
</p>
<ul>
  <li>Rewrote the JIT compiler to use machine registers more
  efficiently.  The new compiler generates code which is:
    <ul>
      <li>50-100% faster for CPU-intensive tasks such as decoding
      images</li>
      <li>25-30% smaller on average</li>
    </ul>
    Most importantly, the new design is much less
    architecture-specific than the old one, making it easier to
    support ISAs besides x86 efficiently.
  </li>
  <li>Implemented Thread.getStackTrace.  This method is especially
  useful for sample-based performance profiling.</li>
  <li>Added support for building Avian as a shared library on all
  platforms</li>
  <li>Various bugfixes and code cleanups</li>
</ul>

<h3>Next Release</h3>
<p>
  The next major release will be 1.0.  These are the remaining
  criteria for that release:
</p>
<ul>
  <li>Support Mac OS X on PowerPC (in progress)</li>
  <li>Rework memory allocation in garbage collector to improve
  performance in low memory situations
  (see <a href="http://groups.google.com/group/avian/browse_thread/thread/5b3f13bf198334b3">here</a>
  for details)</li>
</ul>

<h3>Post-1.0 Ideas</h3>
<ul>
  <li>Experiment with optimizations and extensions to better support
  languages other than Java
    <ul>
      <li>Tail call optimization</li>
      <li>Cooperative multitasking</li>
      <li>First-class functions</li>
      <li><a href="http://jcp.org/en/jsr/detail?id=292">invokedynamic</a></li>
    </ul>
  </li>
  <li>Support additional architectures such as ARM, Sparc, and MIPS</li>
</ul>

<h3>Non-goals</h3>
<p>
  Avian is not a complete Java implementation, nor is it intended to
  be.  Thus, less-used Java features will only be added if they are
  easily maintainable and do not add significant overhead to
  applications which don't use them.
</p>
<p>
  In particular, Avian does no bytecode verification in the VM and no
  security checks in the class library.  Applications which run
  untrusted bytecode must therefore do their own verification and
  sanitation.
</p>

[end]

[template "primary.xml"]
